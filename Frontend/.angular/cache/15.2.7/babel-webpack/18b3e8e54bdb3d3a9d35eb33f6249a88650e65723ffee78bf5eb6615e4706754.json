{"ast":null,"code":"import _asyncToGenerator from \"C:/Angular/Full Stack customer-management with angular/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport TaskModel from 'src/app/models/task-model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/data.service\";\nimport * as i2 from \"src/app/services/notify.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction InsertComponent_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", c_r1.customerId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(c_r1.name);\n  }\n}\nexport class InsertComponent {\n  constructor(dataService, notifyService, router) {\n    this.dataService = dataService;\n    this.notifyService = notifyService;\n    this.router = router;\n    this.task = new TaskModel();\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.customers = yield _this.dataService.getAllCustomers();\n      } catch (err) {\n        _this.notifyService.error(err);\n      }\n    })();\n  }\n  send() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.dataService.addTask(_this2.task);\n        _this2.notifyService.success(\"Task added\");\n        _this2.router.navigateByUrl(\"/list\");\n      } catch (err) {\n        _this2.notifyService.error(err);\n      }\n    })();\n  }\n}\nInsertComponent.ɵfac = function InsertComponent_Factory(t) {\n  return new (t || InsertComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.NotifyService), i0.ɵɵdirectiveInject(i3.Router));\n};\nInsertComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: InsertComponent,\n  selectors: [[\"app-insert\"]],\n  decls: 18,\n  vars: 4,\n  consts: [[\"ngNativeValidate\", \"\", 3, \"ngSubmit\"], [\"name\", \"customerId\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"disabled\", \"\", \"selected\", \"\", \"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"name\", \"taskDescription\", \"required\", \"\", \"maxlength\", \"500\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", \"name\", \"date\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\"]],\n  template: function InsertComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"h1\");\n      i0.ɵɵtext(2, \"Add task\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function InsertComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.send();\n      });\n      i0.ɵɵelementStart(4, \"label\");\n      i0.ɵɵtext(5, \"Customer: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"select\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function InsertComponent_Template_select_ngModelChange_6_listener($event) {\n        return ctx.task.customerId = $event;\n      });\n      i0.ɵɵelementStart(7, \"option\", 2);\n      i0.ɵɵtext(8, \"Select Customer...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, InsertComponent_option_9_Template, 2, 2, \"option\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵtext(11, \"Task Description: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function InsertComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.task.taskDescription = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\");\n      i0.ɵɵtext(14, \"Date: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function InsertComponent_Template_input_ngModelChange_15_listener($event) {\n        return ctx.task.date = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\");\n      i0.ɵɵtext(17, \"Add\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.task.customerId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.customers);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.task.taskDescription);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.task.date);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.MaxLengthValidator, i5.NgModel, i5.NgForm],\n  styles: [\"form[_ngcontent-%COMP%] {\\r\\n\\r\\n    width: 350px;\\r\\n    border:1px solid blue;\\r\\n    border-radius: 10px;\\r\\n    padding: 10px;\\r\\n    margin: auto;\\r\\n    box-shadow: 10px 10px 10px;\\r\\n    text-align: left;\\r\\n   \\r\\n}\\r\\n\\r\\nselect[_ngcontent-%COMP%], input[_ngcontent-%COMP%], button[_ngcontent-%COMP%] {\\r\\n   width: 100%;\\r\\n   font-size: x-large;\\r\\n   margin-bottom: 20px;\\r\\n   box-sizing: border-box;\\r\\n   \\r\\n}\\r\\n\\r\\nh1[_ngcontent-%COMP%] {\\r\\n   \\r\\n   margin-top: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kYXRhLWFyZWEvaW5zZXJ0L2luc2VydC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztJQUVJLFlBQVk7SUFDWixxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGdCQUFnQjs7QUFFcEI7O0FBRUE7R0FDRyxXQUFXO0dBQ1gsa0JBQWtCO0dBQ2xCLG1CQUFtQjtHQUNuQixzQkFBc0I7O0FBRXpCOztBQUVBOztHQUVHLGdCQUFnQjtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImZvcm0ge1xyXG5cclxuICAgIHdpZHRoOiAzNTBweDtcclxuICAgIGJvcmRlcjoxcHggc29saWQgYmx1ZTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gICAgYm94LXNoYWRvdzogMTBweCAxMHB4IDEwcHg7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICBcclxufVxyXG5cclxuc2VsZWN0LCBpbnB1dCwgYnV0dG9uIHtcclxuICAgd2lkdGg6IDEwMCU7XHJcbiAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcclxuICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgXHJcbn1cclxuXHJcbmgxIHtcclxuICAgXHJcbiAgIG1hcmdpbi10b3A6IDEwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";AAGA,OAAOA,SAAS,MAAM,2BAA2B;;;;;;;;;ICMzCC,iCAA2D;IAAAA,YAAU;IAAAA,iBAAS;;;;IAA1CA,uCAAsB;IAACA,eAAU;IAAVA,+BAAU;;;ADG7E,OAAM,MAAOC,eAAe;EAMxBC,YAA2BC,WAAwB,EACvCC,aAA4B,EAC5BC,MAAc;IAFC,gBAAW,GAAXF,WAAW;IAC1B,kBAAa,GAAbC,aAAa;IACb,WAAM,GAANC,MAAM;IALX,SAAI,GAAG,IAAIN,SAAS,EAAE;EAKC;EAGjBO,QAAQ;IAAA;IAAA;MAEjB,IAAI;QACA,KAAI,CAACC,SAAS,SAAS,KAAI,CAACJ,WAAW,CAACK,eAAe,EAAE;OAE5D,CACD,OAAMC,GAAQ,EAAC;QACX,KAAI,CAACL,aAAa,CAACM,KAAK,CAACD,GAAG,CAAC;;IAChC;EAEL;EAEaE,IAAI;IAAA;IAAA;MAEb,IAAI;QACA,MAAM,MAAI,CAACR,WAAW,CAACS,OAAO,CAAC,MAAI,CAACC,IAAI,CAAC;QACzC,MAAI,CAACT,aAAa,CAACU,OAAO,CAAC,YAAY,CAAC;QACxC,MAAI,CAACT,MAAM,CAACU,aAAa,CAAC,OAAO,CAAC;OAGrC,CACD,OAAMN,GAAQ,EAAC;QACX,MAAI,CAACL,aAAa,CAACM,KAAK,CAACD,GAAG,CAAC;;IAChC;EAEL;;AApCSR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAe;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ5BpB,2BAAK;MAEDA,wBAAQ;MAAAA,iBAAK;MAEjBA,+BAA2C;MAArCA;QAAA,OAAYqB,UAAM;MAAA,EAAC;MAErBrB,6BAAO;MAAAA,0BAAU;MAAAA,iBAAQ;MACzBA,iCAAiE;MAAvCA;QAAA;MAAA,EAA6B;MACnDA,iCAAmC;MAAAA,kCAAkB;MAAAA,iBAAS;MAC9DA,sEAA8E;MAClFA,iBAAS;MAETA,8BAAO;MAAAA,mCAAkB;MAAAA,iBAAQ;MACjCA,iCAAuG;MAA5DA;QAAA;MAAA,EAAkC;MAA7EA,iBAAuG;MAEvGA,8BAAO;MAAAA,uBAAM;MAAAA,iBAAQ;MACrBA,iCAAkE;MAAlCA;QAAA;MAAA,EAAuB;MAAvDA,iBAAkE;MAElEA,+BAAQ;MAAAA,oBAAG;MAAAA,iBAAS;;;MAXMA,eAA6B;MAA7BA,6CAA6B;MAE7BA,eAAY;MAAZA,uCAAY;MAIKA,eAAkC;MAAlCA,kDAAkC;MAG7CA,eAAuB;MAAvBA,uCAAuB","names":["TaskModel","i0","InsertComponent","constructor","dataService","notifyService","router","ngOnInit","customers","getAllCustomers","err","error","send","addTask","task","success","navigateByUrl","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Angular\\Full Stack customer-management with angular\\Frontend\\src\\app\\components\\data-area\\insert\\insert.component.ts","C:\\Angular\\Full Stack customer-management with angular\\Frontend\\src\\app\\components\\data-area\\insert\\insert.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport CustomerModel from 'src/app/models/customer-model';\nimport TaskModel from 'src/app/models/task-model';\nimport { DataService } from 'src/app/services/data.service';\nimport { NotifyService } from 'src/app/services/notify.service';\n\n@Component({\n    selector: 'app-insert',\n    templateUrl: './insert.component.html',\n    styleUrls: ['./insert.component.css']\n})\nexport class InsertComponent implements OnInit {\n\n    public customers: CustomerModel[];\n    public task = new TaskModel();\n    \n\n    public constructor(private dataService: DataService, \n        private notifyService: NotifyService,\n        private router: Router) { }\n    \n\n    public async ngOnInit() {\n\n        try {\n            this.customers = await this.dataService.getAllCustomers();\n\n        }\n        catch(err: any){\n            this.notifyService.error(err);\n        }\n        \n    }\n\n    public async send() {\n\n        try {\n            await this.dataService.addTask(this.task);\n            this.notifyService.success(\"Task added\");\n            this.router.navigateByUrl(\"/list\");\n            \n            \n        }\n        catch(err: any){\n            this.notifyService.error(err);\n        }\n\n    }\n\n}\n","<div>\n\n<h1>Add task</h1>\n\n<form (ngSubmit)=\"send()\" ngNativeValidate>\n\n    <label>Customer: </label>\n    <select name=\"customerId\" [(ngModel)]=\"task.customerId\" required>\n        <option disabled selected value=\"\">Select Customer...</option>\n        <option *ngFor=\"let c of customers\" [value]=\"c.customerId\">{{c.name}}</option>\n    </select>\n\n    <label>Task Description: </label>\n    <input type =\"text\" name=\"taskDescription\" [(ngModel)]=\"task.taskDescription\" required maxlength=\"500\">\n\n    <label>Date: </label>\n    <input type =\"date\" name=\"date\" [(ngModel)]=\"task.date\" required >\n\n    <button>Add</button>\n\n</form>\n\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}